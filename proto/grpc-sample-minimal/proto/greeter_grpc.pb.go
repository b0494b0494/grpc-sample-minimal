// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: proto/greeter.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Greeter_SayHello_FullMethodName          = "/proto.Greeter/SayHello"
	Greeter_StreamCounter_FullMethodName     = "/proto.Greeter/StreamCounter"
	Greeter_Chat_FullMethodName              = "/proto.Greeter/Chat"
	Greeter_UploadFile_FullMethodName        = "/proto.Greeter/UploadFile"
	Greeter_DownloadFile_FullMethodName      = "/proto.Greeter/DownloadFile"
	Greeter_ListFiles_FullMethodName         = "/proto.Greeter/ListFiles"
	Greeter_DeleteFile_FullMethodName        = "/proto.Greeter/DeleteFile"
	Greeter_ProcessOCR_FullMethodName        = "/proto.Greeter/ProcessOCR"
	Greeter_GetOCRResult_FullMethodName      = "/proto.Greeter/GetOCRResult"
	Greeter_ListOCRResults_FullMethodName    = "/proto.Greeter/ListOCRResults"
	Greeter_CompareOCRResults_FullMethodName = "/proto.Greeter/CompareOCRResults"
)

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The greeter service definition.
type GreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	StreamCounter(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CounterReply], error)
	Chat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChatMessage, ChatMessage], error)
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileChunk, FileUploadStatus], error)
	DownloadFile(ctx context.Context, in *FileDownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error)
	ListFiles(ctx context.Context, in *FileListRequest, opts ...grpc.CallOption) (*FileListResponse, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	// OCR????????????
	ProcessOCR(ctx context.Context, in *OCRRequest, opts ...grpc.CallOption) (*OCRResponse, error)
	// OCR????
	GetOCRResult(ctx context.Context, in *OCRResultRequest, opts ...grpc.CallOption) (*OCRResultResponse, error)
	// OCR??????
	ListOCRResults(ctx context.Context, in *OCRListRequest, opts ...grpc.CallOption) (*OCRListResponse, error)
	// ??OCR????????Phase 2B???
	CompareOCRResults(ctx context.Context, in *OCRComparisonRequest, opts ...grpc.CallOption) (*OCRComparisonResponse, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Greeter_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) StreamCounter(ctx context.Context, in *CounterRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CounterReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[0], Greeter_StreamCounter_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CounterRequest, CounterReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Greeter_StreamCounterClient = grpc.ServerStreamingClient[CounterReply]

func (c *greeterClient) Chat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChatMessage, ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[1], Greeter_Chat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Greeter_ChatClient = grpc.BidiStreamingClient[ChatMessage, ChatMessage]

func (c *greeterClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileChunk, FileUploadStatus], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[2], Greeter_UploadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileChunk, FileUploadStatus]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Greeter_UploadFileClient = grpc.ClientStreamingClient[FileChunk, FileUploadStatus]

func (c *greeterClient) DownloadFile(ctx context.Context, in *FileDownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[3], Greeter_DownloadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileDownloadRequest, FileChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Greeter_DownloadFileClient = grpc.ServerStreamingClient[FileChunk]

func (c *greeterClient) ListFiles(ctx context.Context, in *FileListRequest, opts ...grpc.CallOption) (*FileListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileListResponse)
	err := c.cc.Invoke(ctx, Greeter_ListFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, Greeter_DeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) ProcessOCR(ctx context.Context, in *OCRRequest, opts ...grpc.CallOption) (*OCRResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OCRResponse)
	err := c.cc.Invoke(ctx, Greeter_ProcessOCR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) GetOCRResult(ctx context.Context, in *OCRResultRequest, opts ...grpc.CallOption) (*OCRResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OCRResultResponse)
	err := c.cc.Invoke(ctx, Greeter_GetOCRResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) ListOCRResults(ctx context.Context, in *OCRListRequest, opts ...grpc.CallOption) (*OCRListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OCRListResponse)
	err := c.cc.Invoke(ctx, Greeter_ListOCRResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) CompareOCRResults(ctx context.Context, in *OCRComparisonRequest, opts ...grpc.CallOption) (*OCRComparisonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OCRComparisonResponse)
	err := c.cc.Invoke(ctx, Greeter_CompareOCRResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility.
//
// The greeter service definition.
type GreeterServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	StreamCounter(*CounterRequest, grpc.ServerStreamingServer[CounterReply]) error
	Chat(grpc.BidiStreamingServer[ChatMessage, ChatMessage]) error
	UploadFile(grpc.ClientStreamingServer[FileChunk, FileUploadStatus]) error
	DownloadFile(*FileDownloadRequest, grpc.ServerStreamingServer[FileChunk]) error
	ListFiles(context.Context, *FileListRequest) (*FileListResponse, error)
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	// OCR????????????
	ProcessOCR(context.Context, *OCRRequest) (*OCRResponse, error)
	// OCR????
	GetOCRResult(context.Context, *OCRResultRequest) (*OCRResultResponse, error)
	// OCR??????
	ListOCRResults(context.Context, *OCRListRequest) (*OCRListResponse, error)
	// ??OCR????????Phase 2B???
	CompareOCRResults(context.Context, *OCRComparisonRequest) (*OCRComparisonResponse, error)
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGreeterServer struct{}

func (UnimplementedGreeterServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGreeterServer) StreamCounter(*CounterRequest, grpc.ServerStreamingServer[CounterReply]) error {
	return status.Errorf(codes.Unimplemented, "method StreamCounter not implemented")
}
func (UnimplementedGreeterServer) Chat(grpc.BidiStreamingServer[ChatMessage, ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedGreeterServer) UploadFile(grpc.ClientStreamingServer[FileChunk, FileUploadStatus]) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedGreeterServer) DownloadFile(*FileDownloadRequest, grpc.ServerStreamingServer[FileChunk]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedGreeterServer) ListFiles(context.Context, *FileListRequest) (*FileListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedGreeterServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedGreeterServer) ProcessOCR(context.Context, *OCRRequest) (*OCRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessOCR not implemented")
}
func (UnimplementedGreeterServer) GetOCRResult(context.Context, *OCRResultRequest) (*OCRResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOCRResult not implemented")
}
func (UnimplementedGreeterServer) ListOCRResults(context.Context, *OCRListRequest) (*OCRListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOCRResults not implemented")
}
func (UnimplementedGreeterServer) CompareOCRResults(context.Context, *OCRComparisonRequest) (*OCRComparisonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareOCRResults not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}
func (UnimplementedGreeterServer) testEmbeddedByValue()                 {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	// If the following call pancis, it indicates UnimplementedGreeterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_StreamCounter_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CounterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).StreamCounter(m, &grpc.GenericServerStream[CounterRequest, CounterReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Greeter_StreamCounterServer = grpc.ServerStreamingServer[CounterReply]

func _Greeter_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).Chat(&grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Greeter_ChatServer = grpc.BidiStreamingServer[ChatMessage, ChatMessage]

func _Greeter_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).UploadFile(&grpc.GenericServerStream[FileChunk, FileUploadStatus]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Greeter_UploadFileServer = grpc.ClientStreamingServer[FileChunk, FileUploadStatus]

func _Greeter_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileDownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).DownloadFile(m, &grpc.GenericServerStream[FileDownloadRequest, FileChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Greeter_DownloadFileServer = grpc.ServerStreamingServer[FileChunk]

func _Greeter_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_ListFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).ListFiles(ctx, req.(*FileListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_ProcessOCR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OCRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).ProcessOCR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_ProcessOCR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).ProcessOCR(ctx, req.(*OCRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_GetOCRResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OCRResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GetOCRResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_GetOCRResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GetOCRResult(ctx, req.(*OCRResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_ListOCRResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OCRListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).ListOCRResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_ListOCRResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).ListOCRResults(ctx, req.(*OCRListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_CompareOCRResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OCRComparisonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).CompareOCRResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_CompareOCRResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).CompareOCRResults(ctx, req.(*OCRComparisonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _Greeter_ListFiles_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _Greeter_DeleteFile_Handler,
		},
		{
			MethodName: "ProcessOCR",
			Handler:    _Greeter_ProcessOCR_Handler,
		},
		{
			MethodName: "GetOCRResult",
			Handler:    _Greeter_GetOCRResult_Handler,
		},
		{
			MethodName: "ListOCRResults",
			Handler:    _Greeter_ListOCRResults_Handler,
		},
		{
			MethodName: "CompareOCRResults",
			Handler:    _Greeter_CompareOCRResults_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCounter",
			Handler:       _Greeter_StreamCounter_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Chat",
			Handler:       _Greeter_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadFile",
			Handler:       _Greeter_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _Greeter_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/greeter.proto",
}
