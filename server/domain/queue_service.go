package domain

import (
	"context"
	"fmt"
)

// QueueService ??????????????????????
// ???????????????????????????????
type QueueService interface {
	// EnqueueOCRTask ?OCR????????????
	EnqueueOCRTask(ctx context.Context, filename string, storageProvider string) error
	
	// DequeueOCRTask ??????OCR????????????????
	DequeueOCRTask(ctx context.Context) (*OCRTask, error)
}

// OCRTask ?OCR????????
type OCRTask struct {
	Filename        string
	StorageProvider string
}

// NewQueueService ????????????????????????????
func NewQueueService(storageProvider string) (QueueService, error) {
	switch storageProvider {
	case "s3":
		// AWS?: Localstack?SQS?????????????
		return NewLocalstackSQSService(), nil
	case "gcs":
		// GCP?: Pub/Sub????????????????????
		return NewGCPPubSubService(), nil
	case "azure":
		// Azure?: Azurite Queue Storage??????10001??????
		return NewAzuriteQueueService(), nil
	default:
		// ?????: ??????????in-memory?goroutine????
		return NewCommonQueueService(), nil
	}
}

// commonQueueService ???????????in-memory???
// ???????????????????????????
type commonQueueService struct {
	tasks chan *OCRTask
}

// NewCommonQueueService ???????????????
func NewCommonQueueService() QueueService {
	return &commonQueueService{
		tasks: make(chan *OCRTask, 100), // ???????100
	}
}

func (q *commonQueueService) EnqueueOCRTask(ctx context.Context, filename string, storageProvider string) error {
	task := &OCRTask{
		Filename:        filename,
		StorageProvider: storageProvider,
	}
	
	select {
	case q.tasks <- task:
		return nil
	case <-ctx.Done():
		return ctx.Err()
	default:
		return fmt.Errorf("queue is full")
	}
}

func (q *commonQueueService) DequeueOCRTask(ctx context.Context) (*OCRTask, error) {
	select {
	case task := <-q.tasks:
		return task, nil
	case <-ctx.Done():
		return nil, ctx.Err()
	}
}

// localstackSQSService ?Localstack SQS????????????
// Phase 1: ?????????Phase 2?Localstack SQS???
type localstackSQSService struct {
	fallback QueueService // ????????????????
}

func NewLocalstackSQSService() QueueService {
	// Phase 1: ?????????????
	// Phase 2: Localstack SQS??????????
	// Localstack?SERVICES=s3,sqs?SQS????
	return &localstackSQSService{
		fallback: NewCommonQueueService(),
	}
}

func (q *localstackSQSService) EnqueueOCRTask(ctx context.Context, filename string, storageProvider string) error {
	// Phase 1: ????????
	// Phase 2: Localstack SQS??????????????
	return q.fallback.EnqueueOCRTask(ctx, filename, storageProvider)
}

func (q *localstackSQSService) DequeueOCRTask(ctx context.Context) (*OCRTask, error) {
	// Phase 1: ????????
	// Phase 2: Localstack SQS???????????????
	return q.fallback.DequeueOCRTask(ctx)
}

// azuriteQueueService ?Azurite Queue Storage????????????
// Phase 1: ?????????Phase 2?Azurite Queue Storage???
type azuriteQueueService struct {
	fallback QueueService // ????????????????
}

func NewAzuriteQueueService() QueueService {
	// Phase 1: ?????????????
	// Phase 2: Azurite Queue Storage??????????
	// Azurite??????10001?Queue???????
	return &azuriteQueueService{
		fallback: NewCommonQueueService(),
	}
}

func (q *azuriteQueueService) EnqueueOCRTask(ctx context.Context, filename string, storageProvider string) error {
	// Phase 1: ????????
	// Phase 2: Azurite Queue Storage??????????????
	// Azure SDK: github.com/Azure/azure-sdk-for-go/sdk/storage/azqueue
	return q.fallback.EnqueueOCRTask(ctx, filename, storageProvider)
}

func (q *azuriteQueueService) DequeueOCRTask(ctx context.Context) (*OCRTask, error) {
	// Phase 1: ????????
	// Phase 2: Azurite Queue Storage???????????????
	return q.fallback.DequeueOCRTask(ctx)
}

// gcpPubSubService ?GCP Pub/Sub??????????????????
// Phase 1: ?????????Phase 2?Pub/Sub?????????
type gcpPubSubService struct {
	fallback QueueService
}

func NewGCPPubSubService() QueueService {
	// Phase 1: ?????????????
	// Phase 2: Pub/Sub????????????????
	// Pub/Sub??????: gcr.io/google.com/cloudsdktool/cloud-sdk ???
	// google/cloud-sdk-emulators/pubsub ???????
	return &gcpPubSubService{
		fallback: NewCommonQueueService(),
	}
}

func (q *gcpPubSubService) EnqueueOCRTask(ctx context.Context, filename string, storageProvider string) error {
	// Phase 1: ????????
	// Phase 2: Pub/Sub????????????????????
	return q.fallback.EnqueueOCRTask(ctx, filename, storageProvider)
}

func (q *gcpPubSubService) DequeueOCRTask(ctx context.Context) (*OCRTask, error) {
	// Phase 1: ????????
	// Phase 2: Pub/Sub?????????????????????
	return q.fallback.DequeueOCRTask(ctx)
}
